import React, {
	cloneElement,
	memo,
	useContext,
	useEffect,
	useMemo,
	useRef,
	useState,
} from "react"
import styles from "./style.module.scss"
import { Button, Space as div, Switch } from "antd"
import { InfoOutlined,DeleteOutlined,EditOutlined } from "@ant-design/icons"
import ProTable from "@/components/Pro/ProTable"
import { ProTableColumns, ProTableRef } from "@/components/Pro/ProTable/type"
import {
	bsConvertTableList,
	formatTableSearchParams,
} from "@/utils/formatValues"
import RenderDrawerForm from "@/components/Pro/ProForm/components/DrawerForm/RenderDrawerForm"
import { DrawerFormRef } from "@/components/Pro/ProForm/components/DrawerForm"
import styles from './style.module.scss'
const columns: ProTableColumns<any>[] = [
	{
		title: "房间编号",
		width: 160,
		dataIndex: "orgRoomId",
		search: {
			label: undefined,
			name: "roomId",
			placeholder: "房间编号",
		},
		read: {
			copyable: true,
			ellipsis: true,
		},
	},
	{
		title: "床位编号",
		width: 100,
		dataIndex: "num",
	},
	{
		title: "入住用户",
		dataIndex: "memberName",
		read: {
			copyable: true,
		},
	},
	{
		title: "护管人员",
		dataIndex: "careWorkerName",
		read: {
			copyable: true,
		},
	},
	{
		title: "床垫设备号",
		dataIndex: "deviceNum",
		read: {
			copyable: true,
		},
	},
	{
		title: "开放状态",
		dataIndex: "status",
		render(value) {
			return <Switch defaultChecked={value} />
		},
	},
]

function BedAllot() {
 
	const proTableColumns = useMemo(
		() =>
			columns.concat({
				title: "操作",
				key: "action",
				width: 250,
				render: (record) => {
					return (
						<div>
							<Button icon={<InfoOutlined />} type='link' size='small'>
								详情
							</Button> 
							<Button
								onClick={() => { 
                  console.log("编辑数据")
                }}
								icon={<EditOutlined />}
								type='link'
								size='small'
							>
								编辑
							</Button>
							<Button icon={<DeleteOutlined />} type='link' size='small'>
								删除
							</Button>
						</div>
					)
				},
			}),
		[]
	)
	return (
		<div className={styles.page_wrap}>
			<ProTable
				bordered
				rowKey='id'
				ref={ref}
				title='<%= title %>'
				columns={proTableColumns}
				onSearch={formatTableSearchParams}
				transform={bsConvertTableList}
				request={{
					url: "/orgmgt/bed/list",
					method: "post",
					params: { buildingId, pageNo: 1, pageSize: 10 },
				}}
				onCreate={() => {
					console.log("新增数据")
				}}
        onDelete={async(values)=>{
          console.log('删除数据')
        }}

				// onCreate 新增 table 内部
				// onDelete 删除 table 内部
				// onEdit  编辑 属于 table 外部
			/>
			{/* 外部如何能控制呢? */}
			<RenderDrawerForm
				request={{
					url: "<%= listUrl %>",
					params: { id: editId },
					method: "get",
				}}
				id={editId}
				title='<%= title %>编辑'
				ref={formRef}
				columns={columns}
			/>
			<RenderDrawerForm
				request={{
					url: "/orgmgt/bed/member/queryByBedId",
					params: { id: editId },
					method: "get",
				}}
				title="<%= title %>新增"
				columns={columns}
			/>
		</div>
	)
}
export default BedAllot
